package structuredBinarySearch;

/* issues
- tabel moet meer dan null zijn
- last numbers not found
- position mentioned might not be correct
 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class findUserInput {


	static int sNumber;
	static int midvalue;
	static int midindex;
	
	
	public static void findMiddle()
	{
	// enter your number
	System.out.println("Enter the number you want to find in the list.");
	scanner = new Scanner(System.in);
	String esNumber = scanner.nextLine();
	
	// convert input to int and use this
	 sNumber = Integer.parseInt(esNumber);
	 

	// midvalue is the middle of an total index rounded upwards
	midindex = enteries.indexOf(Math.round(enteries.size()/2))+1;
	midvalue = enteries.get (midindex);
	
	/* test
	System.out.println ("size is: " + enteries.size());
	System.out.println ("middle index is: " + midindex);
	System.out.println ("mid value is: " + midvalue);
	*/
	}

	
	public static boolean higher()
	//check if midvalue is higher/equal (true) or lower (false) than the number to search
	{
	
	if ( sNumber >= midvalue ) 
	{
		// higher = true;
		System.out.println ("entered number is equal or higher");
		return true;
	}  
	else 
	{
		System.out.println ("midvalue is lower");
		return false;	
	}
	
	}
	
	
	
	public static void searchNumber () 
	{
		boolean found = false;
		int i;
		
		//check higher from middle
						
		if (higher()) 
		{
		for (i = (midindex); i < (enteries.size()-1) ; i++)
			{
			if (enteries.get(i).equals(sNumber))
		 	{
			// found
			 found = true;
			/*test
			System.out.println(sNumber);
			System.out.println (enteries.get(i));
			*/
			 break;
		 	}	
			}

		}
		
		//check lower from middle
		else  
		{
			for (i = (midindex); i > 0 ; i--)
			{
			 if (enteries.get(i).equals(sNumber))
			 {
				// found
				 found = true;
				 break;
			 }		
			}
		}
		
		// if found / not found
		if (found) 
			{ System.out.println ("Equal number " + sNumber + " found in position "  + enteries.get(i));
			}
			
		else  System.out.println ("Number " + sNumber + " not found in List ");
				}
	
	
	public static void main(String[] args) 
	{
		
		createList(args);
		findMiddle();
		// boolean goes wrong
		searchNumber();
					
		}
}



