package structuredBinarySearch;

/* issues
- midindex position mentioned might not be correct
- 1st position value selected gives error
errors:
error in midvalue = createtheList.enteries.get (midindex);
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.elementData(Unknown Source)
	at java.util.ArrayList.get(Unknown Source)
 */

import java.util.Scanner;

public class findUserInput {

	private static Scanner scanner;
	static int sNumber;
	static int midvalue;
	static int midindex;
	static int size;
	// static int currentNumber;
	
	
	public static void enterSearch()
	{
	// enter your number and convert to int.
		System.out.println("Enter the number you want to find in the list.");
		scanner = new Scanner(System.in);
		String esNumber = scanner.nextLine();
		sNumber = Integer.parseInt(esNumber);
	}
	
	public static void findMiddle()
	{
	// midvalue is the middle of an total index rounded upwards
	size = createtheList.enteries.size();
	midindex = createtheList.enteries.indexOf(Math.round(size/2));
	midvalue = createtheList.enteries.get(midindex);
	
	// test
	System.out.println ("size is: " + size);
	System.out.println ("middle index is: " + midindex);
	System.out.println ("mid value is: " + midvalue);
	}

	
	public static boolean higher()
	//check if midvalue is higher/equal (true) or lower (false) than the number to search
	{
		
	if ( sNumber >= midvalue ) 
	{
		System.out.println ("entered number is equal or higher");
		return true;
	}  
	else 
	{
		System.out.println ("midvalue is lower");
		return false;	
	}
	}
	
	
	
	public static void searchNumber () 
	{
		boolean found = false;
		int i;
		int currentNumber; 
		
		//check higher from middle
						
		if (higher()) 
		{
		for (i = (midindex); i < (size-1) ; i++)
			{
			currentNumber = createtheList.enteries.get(i);
			if (currentNumber == sNumber)
		 	{
			found = true;
			break;
		 	}	
			}

		}
		
		//check lower from middle
		else  
		{
			for (i = (midindex); i > 0 ; i--)
			{
			currentNumber = createtheList.enteries.get(i);
			 if (currentNumber == sNumber)
			 {
				// found
				 found = true;
				 break;
			 }		
			}
		}
		
		if (found) 
			{ System.out.println ("Equal number " + sNumber + " found in position "  + i);
			}
			
		else  System.out.println ("Number " + sNumber + " not found in List ");
				}
	
	
	public static void main(String[] args) 
	{	
		// call another class
		createtheList.createList(args); 
		enterSearch();
		findMiddle();
		searchNumber();
		}
}



