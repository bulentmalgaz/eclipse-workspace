package tests;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class binarySearch {

	private static Scanner scanner;
	static List<Integer> enteries = new ArrayList<Integer>();
	static int simpleArray[];
	static int sNumber;
	static boolean higher;	
	static int midvalue;
	
	public static boolean isStringInt(String s)
	{
	    try
	    {
	        Integer.parseInt(s);
	        return true;
	    } catch (NumberFormatException ex)
	    {
	        return false;
	    }
	}
	
	public static void createList (String[] args) 
	
	{
		// enter a row of numbers
		System.out.println("Enter your own amount of numbers to a list. Press 'enter' after every number. ");
		System.out.println("Letters will be ignored. Type 'ready' if you are ready.");
				
		scanner = new Scanner(System.in);
		String number = "";
								
				do 
				{
				number = scanner.nextLine();
				
				// check if stop-sign is given
				if(!number.equalsIgnoreCase("ready"))
					{
					// check if they are numbers instead of other values, add as numbers
					if (isStringInt(number)) 
					{ enteries.add(Integer.parseInt(number));}
					else System.out.println("Sorry only numbers allowed.");
					}
				else System.out.print("thank you; numbers are added and row is made.");
				}
				
				while (!number.equalsIgnoreCase("ready"));
				
				// sort the array
				Collections.sort(enteries);
					
				// test that its correct:
				System.out.print(enteries);

			
	}
	

	public static void higherOrlowersearch(boolean higher) 
	{
	// enter your number
	System.out.print("Enter the number you want to find in the list.");
	scanner = new Scanner(System.in);
	String esNumber = scanner.nextLine();
	
	// convert input to int and use this
	int sNumber = Integer.parseInt(esNumber);
		
	// check if midvalue is higher/equal (true) or lower (false) than the number to search
	midvalue = (simpleArray.length/2);
	if (simpleArray[midvalue] >= sNumber)
	{
		higher = true;
	}
	}
	
	
	public static void searchNumber () 
	{
		int i;
		
		//check higher from middle
		if (higher = true)
		{
		for (i = (midvalue); i < (simpleArray.length-1) ; ++i)
		{
		 if (simpleArray[i] == (sNumber))
			 System.out.print("Equal number " + sNumber + " found in position "  + simpleArray[i]);
		 	break;
			 
		}
	}
	}
		
	public static void main(String[] args) {
		
	
		createList(args);
		// something wrong from here....
		higherOrlowersearch(higher);
		searchNumber ();
		
			
		}
}



